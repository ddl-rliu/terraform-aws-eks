version: 2.1

orbs:
  terraform: circleci/terraform@3.2.0

jobs:
  pre-commit:
    docker:
      - image: cimg/python:3.11.1
    parameters:
      terraform_version:
        type: string

    steps:
      - checkout

      - terraform/install:
          terraform_version: <<parameters.terraform_version>>
      - run:
          name: pre-commit
          command: |
            curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
            curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
            curl -L https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-linux-amd64.tar.gz | tar -C /tmp -xzf - && chmod +x /tmp/terraform-docs && sudo mv /tmp/terraform-docs /usr/local/bin
            pip3 install checkov pre-commit
            SKIP=no-commit-to-branch,circleci-validate pre-commit run --all-files

  test:
    docker:
      - image: cimg/aws:2022.11
    parameters:
      workspace:
        type: string
        default: circleci-<< pipeline.number >>
      terraform_version:
        type: string
    environment:
      WORKSPACE: << parameters.workspace >>

    steps:
      - checkout

      - terraform/install:
          terraform_version: <<parameters.terraform_version>>

      - run:
          name: Configure test cluster env
          command: |
            echo export TF_VAR_deploy_id=\"${WORKSPACE}\" >> $BASH_ENV
            echo 'export TF_VAR_tags=\{\"CIRCLE_BUILD_URL\"=\"${CIRCLE_BUILD_URL}\",\"CIRCLE_PR_NUMBER\"=\"${CIRCLE_PR_NUMBER}\",\"CIRCLE_PULL_REQUEST\"=\"${CIRCLE_PULL_REQUEST}\",\"CIRCLE_REPOSITORY_URL\"=\"${CIRCLE_REPOSITORY_URL}\"\}' >> $BASH_ENV

      - run:
          name: Test Terraform
          working_directory: tests
          command: |
            ssh-keygen -q -P '' -t rsa -b 4096 -m PEM -f domino.pem
            terraform init
            terraform validate
            terraform workspace new ${WORKSPACE}
            terraform apply -auto-approve
            # we will always have drift
            # terraform plan -detailed-exitcode

      - run:
          name: Terraform destroy
          working_directory: tests
          command: |
            terraform destroy -auto-approve
          when: always

      - run:
          name: Terraform workspace delete
          working_directory: tests
          command: |
            terraform workspace select default
            terraform workspace delete ${WORKSPACE}

parameters:
  terraform_version:
    default: "1.3.6"
    type: string

workflows:
  build:
    jobs:
      - pre-commit:
          terraform_version: << pipeline.parameters.terraform_version >>
      - test:
          terraform_version: << pipeline.parameters.terraform_version >>
          requires:
            - pre-commit
